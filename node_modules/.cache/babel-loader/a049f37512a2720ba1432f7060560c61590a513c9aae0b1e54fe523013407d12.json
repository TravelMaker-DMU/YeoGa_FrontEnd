{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/TripCourse.css';\nimport axios from 'axios';\nconst TripCourse = () => {\n  _s();\n  const [cardData, setCardData] = useState([]);\n  const [tripnews, setTripnews] = useState([]);\n  const [error, setError] = useState(null);\n\n  // 한국 관광 API 요청\n  useEffect(() => {\n    const fetchTouristSpots = async () => {\n      try {\n        const serviceKey = process.env.REACT_APP_API_KEY_openapi;\n        const response = await axios.get(\"/korea-tour-api\", {\n          // 프록시 경로 사용\n          params: {\n            serviceKey: serviceKey,\n            numOfRows: 1,\n            MobileOS: 'ETC',\n            MobileApp: 'AppTest',\n            _type: 'json',\n            arrange: 'R',\n            listYN: 'Y',\n            eventStartDate: '20241001'\n          }\n        });\n        if (response.data.response.body.items) {\n          setTripnews(response.data.response.body.items.item);\n        } else {\n          setError(\"데이터를 불러오지 못했습니다.\");\n        }\n      } catch (err) {\n        setError(\"API 요청 중 오류가 발생했습니다.\");\n        console.error(err);\n      }\n    };\n    fetchTouristSpots();\n  }, []);\n\n  // Google Places API 요청\n  useEffect(() => {\n    const fetchLodgingData = async () => {\n      try {\n        const response = await axios.get('/google-maps-api/json', {\n          // 프록시 경로 사용\n          params: {\n            location: '37.7749,-122.4194',\n            // 예시 위치\n            radius: 5000,\n            // 검색 범위\n            keyword: '숙소',\n            // 검색 키워드 \n            key: process.env.REACT_APP_GOOGLE_API_KEY // Google API 키\n          }\n        });\n\n        // 데이터 추출하여 카드 형식으로 변환\n        const fetchedData = response.data.results.map(place => ({\n          image: place.photos && place.photos.length > 0 ? `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${place.photos[0].photo_reference}&key=${process.env.REACT_APP_GOOGLE_API_KEY}` : 'https://via.placeholder.com/150',\n          // 사진이 없는 경우 기본 이미지\n          title: place.name,\n          description: place.vicinity,\n          rating: place.rating || '평점 없음'\n        }));\n        setCardData(fetchedData);\n      } catch (error) {\n        console.error(\"Error fetching lodging data:\", error);\n      }\n    };\n    fetchLodgingData();\n  }, []);\n\n  // 이하 렌더링 코드 유지\n};\n_s(TripCourse, \"yja526BIzRj2svgE3dXeiwPUIO8=\");\n_c = TripCourse;\nvar _c;\n$RefreshReg$(_c, \"TripCourse\");","map":{"version":3,"names":["React","useState","useEffect","axios","TripCourse","_s","cardData","setCardData","tripnews","setTripnews","error","setError","fetchTouristSpots","serviceKey","process","env","REACT_APP_API_KEY_openapi","response","get","params","numOfRows","MobileOS","MobileApp","_type","arrange","listYN","eventStartDate","data","body","items","item","err","console","fetchLodgingData","location","radius","keyword","key","REACT_APP_GOOGLE_API_KEY","fetchedData","results","map","place","image","photos","length","photo_reference","title","name","description","vicinity","rating","_c","$RefreshReg$"],"sources":["C:/Users/user/YeoGa_FrontEnd/src/components/TripCourse.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../styles/TripCourse.css';\r\nimport axios from 'axios';\r\n\r\nconst TripCourse = () => {\r\n    const [cardData, setCardData] = useState([]);\r\n    const [tripnews, setTripnews] = useState([]);\r\n    const [error, setError] = useState(null);\r\n\r\n    // 한국 관광 API 요청\r\n    useEffect(() => {\r\n        const fetchTouristSpots = async () => {\r\n            try {\r\n                const serviceKey = process.env.REACT_APP_API_KEY_openapi;\r\n                const response = await axios.get(\"/korea-tour-api\", { // 프록시 경로 사용\r\n                    params: {\r\n                        serviceKey: serviceKey,\r\n                        numOfRows: 1,\r\n                        MobileOS: 'ETC',\r\n                        MobileApp: 'AppTest',\r\n                        _type: 'json',\r\n                        arrange: 'R',\r\n                        listYN: 'Y',\r\n                        eventStartDate: '20241001'\r\n                    }\r\n                });\r\n\r\n                if (response.data.response.body.items) {\r\n                    setTripnews(response.data.response.body.items.item);\r\n                } else {\r\n                    setError(\"데이터를 불러오지 못했습니다.\");\r\n                }\r\n            } catch (err) {\r\n                setError(\"API 요청 중 오류가 발생했습니다.\");\r\n                console.error(err);\r\n            }\r\n        };\r\n\r\n        fetchTouristSpots();\r\n    }, []);\r\n\r\n    // Google Places API 요청\r\n    useEffect(() => {\r\n        const fetchLodgingData = async () => {\r\n            try {\r\n                const response = await axios.get('/google-maps-api/json', { // 프록시 경로 사용\r\n                    params: {\r\n                        location: '37.7749,-122.4194', // 예시 위치\r\n                        radius: 5000, // 검색 범위\r\n                        keyword: '숙소', // 검색 키워드 \r\n                        key: process.env.REACT_APP_GOOGLE_API_KEY // Google API 키\r\n                    }\r\n                });\r\n\r\n                // 데이터 추출하여 카드 형식으로 변환\r\n                const fetchedData = response.data.results.map((place) => ({\r\n                    image: place.photos && place.photos.length > 0 \r\n                        ? `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=${place.photos[0].photo_reference}&key=${process.env.REACT_APP_GOOGLE_API_KEY}`\r\n                        : 'https://via.placeholder.com/150', // 사진이 없는 경우 기본 이미지\r\n                    title: place.name,\r\n                    description: place.vicinity,\r\n                    rating: place.rating || '평점 없음'\r\n                }));\r\n\r\n                setCardData(fetchedData);\r\n            } catch (error) {\r\n                console.error(\"Error fetching lodging data:\", error);\r\n            }\r\n        };\r\n\r\n        fetchLodgingData();\r\n    }, []);\r\n\r\n    // 이하 렌더링 코드 유지\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}