{"ast":null,"code":"// src/api.js\nimport axios from 'axios';\nconst apiUrl = 'https://port-0-yeoga-backend-m1hgzlk8a26c4004.sel4.cloudtype.app';\nconst api = axios.create({\n  baseURL: apiUrl\n});\n\n// reissueAccessToken 함수도 이 파일에 넣기\nconst reissueAccessToken = async () => {\n  try {\n    const response = await axios.post(`${apiUrl}/reissue`, {}, {\n      withCredentials: true\n    });\n    const newAccessToken = response.data.accessToken;\n    sessionStorage.setItem('accessToken', newAccessToken);\n    return newAccessToken;\n  } catch (error) {\n    console.error('엑세스 토큰 재발급 실패:', error);\n    throw error;\n  }\n};\napi.interceptors.request.use(async config => {\n  let token = sessionStorage.getItem('accessToken');\n  if (token) {\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    const currentTime = Math.floor(Date.now() / 1000);\n    if (currentTime > payload.exp) {\n      console.log('토큰이 만료되었습니다. 새로운 토큰을 요청합니다.');\n      try {\n        token = await reissueAccessToken();\n      } catch (error) {\n        console.error('새로운 토큰 발급 실패');\n        // 로그아웃 또는 리다이렉트 로직을 여기에 추가할 수 있습니다.\n      }\n    }\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport default api;","map":{"version":3,"names":["axios","apiUrl","api","create","baseURL","reissueAccessToken","response","post","withCredentials","newAccessToken","data","accessToken","sessionStorage","setItem","error","console","interceptors","request","use","config","token","getItem","payload","JSON","parse","atob","split","currentTime","Math","floor","Date","now","exp","log","headers","Authorization"],"sources":["C:/Users/user/YeoGa_FrontEnd/src/api.js"],"sourcesContent":["// src/api.js\r\nimport axios from 'axios';\r\n\r\nconst apiUrl = 'https://port-0-yeoga-backend-m1hgzlk8a26c4004.sel4.cloudtype.app';\r\n\r\nconst api = axios.create({\r\n  baseURL: apiUrl,\r\n});\r\n\r\n// reissueAccessToken 함수도 이 파일에 넣기\r\nconst reissueAccessToken = async () => {\r\n  try {\r\n    const response = await axios.post(`${apiUrl}/reissue`, {}, {\r\n      withCredentials: true,\r\n    });\r\n    const newAccessToken = response.data.accessToken;\r\n    sessionStorage.setItem('accessToken', newAccessToken);\r\n    return newAccessToken;\r\n  } catch (error) {\r\n    console.error('엑세스 토큰 재발급 실패:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\napi.interceptors.request.use(async (config) => {\r\n  let token = sessionStorage.getItem('accessToken');\r\n  if (token) {\r\n    const payload = JSON.parse(atob(token.split('.')[1]));\r\n    const currentTime = Math.floor(Date.now() / 1000);\r\n\r\n    if (currentTime > payload.exp) {\r\n      console.log('토큰이 만료되었습니다. 새로운 토큰을 요청합니다.');\r\n      try {\r\n        token = await reissueAccessToken(); \r\n      } catch (error) {\r\n        console.error('새로운 토큰 발급 실패');\r\n        // 로그아웃 또는 리다이렉트 로직을 여기에 추가할 수 있습니다.\r\n      }\r\n    }\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport default api;\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,MAAM,GAAG,kEAAkE;AAEjF,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH;AACX,CAAC,CAAC;;AAEF;AACA,MAAMI,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAC,GAAGN,MAAM,UAAU,EAAE,CAAC,CAAC,EAAE;MACzDO,eAAe,EAAE;IACnB,CAAC,CAAC;IACF,MAAMC,cAAc,GAAGH,QAAQ,CAACI,IAAI,CAACC,WAAW;IAChDC,cAAc,CAACC,OAAO,CAAC,aAAa,EAAEJ,cAAc,CAAC;IACrD,OAAOA,cAAc;EACvB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtC,MAAMA,KAAK;EACb;AACF,CAAC;AAEDZ,GAAG,CAACc,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAOC,MAAM,IAAK;EAC7C,IAAIC,KAAK,GAAGR,cAAc,CAACS,OAAO,CAAC,aAAa,CAAC;EACjD,IAAID,KAAK,EAAE;IACT,MAAME,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACL,KAAK,CAACM,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrD,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;IAEjD,IAAIJ,WAAW,GAAGL,OAAO,CAACU,GAAG,EAAE;MAC7BjB,OAAO,CAACkB,GAAG,CAAC,6BAA6B,CAAC;MAC1C,IAAI;QACFb,KAAK,GAAG,MAAMf,kBAAkB,CAAC,CAAC;MACpC,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,cAAc,CAAC;QAC7B;MACF;IACF;IACAK,MAAM,CAACe,OAAO,CAACC,aAAa,GAAG,UAAUf,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,eAAejB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}