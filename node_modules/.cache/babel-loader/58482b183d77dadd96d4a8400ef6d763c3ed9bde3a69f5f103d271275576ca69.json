{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\YeoGa_FrontEnd\\\\src\\\\page\\\\Test2.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Test2 = () => {\n  _s();\n  const axios = require('axios');\n  const serviceKey = '7qIlmVuNGV7pzIFYHRANmtd94tO1QGcC7a3hJRjj7lEshFvVHSRyw9AR9IhSHMoHYz2VV7uif6Wf5u517bNjlg%3D%3D'; // 발급받은 API 키\n  const url = 'http://apis.data.go.kr/B551011/TarRlteTarService'; // API 엔드포인트\n\n  // 파라미터 설정\n  const params = {\n    serviceKey: serviceKey,\n    numOfRows: 10,\n    // 한 번에 불러올 데이터 수\n    pageNo: 1,\n    // 페이지 번호\n    MobileOS: 'ETC',\n    // 호출하는 OS 종류\n    MobileApp: 'TestApp',\n    // 호출하는 앱 이름\n    _type: 'json' // 응답 형식을 JSON으로 지정\n  };\n\n  // useEffect를 사용하여 컴포넌트가 처음 렌더링될 때만 API 호출\n  useEffect(() => {\n    axios.get(url, {\n      params\n    }).then(response => {\n      console.log(response.data); // 받아온 데이터 출력\n    }).catch(error => {\n      console.error('Error:', error); // 에러 발생 시 출력\n    });\n  }, []); // 빈 배열은 의존성이 없음을 의미, 즉 처음 렌더링 시 한 번만 실행\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"aa\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(Test2, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Test2;\nexport default Test2;\nvar _c;\n$RefreshReg$(_c, \"Test2\");","map":{"version":3,"names":["React","axios","jsxDEV","_jsxDEV","Test2","_s","require","serviceKey","url","params","numOfRows","pageNo","MobileOS","MobileApp","_type","useEffect","get","then","response","console","log","data","catch","error","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/YeoGa_FrontEnd/src/page/Test2.jsx"],"sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst Test2 = () => {\r\n\r\n    const axios = require('axios');\r\n\r\nconst serviceKey = '7qIlmVuNGV7pzIFYHRANmtd94tO1QGcC7a3hJRjj7lEshFvVHSRyw9AR9IhSHMoHYz2VV7uif6Wf5u517bNjlg%3D%3D';  // 발급받은 API 키\r\nconst url = 'http://apis.data.go.kr/B551011/TarRlteTarService';  // API 엔드포인트\r\n\r\n// 파라미터 설정\r\nconst params = {\r\n  serviceKey: serviceKey,\r\n  numOfRows: 10,            // 한 번에 불러올 데이터 수\r\n  pageNo: 1,                // 페이지 번호\r\n  MobileOS: 'ETC',          // 호출하는 OS 종류\r\n  MobileApp: 'TestApp',      // 호출하는 앱 이름\r\n  _type: 'json',            // 응답 형식을 JSON으로 지정\r\n};\r\n\r\n// useEffect를 사용하여 컴포넌트가 처음 렌더링될 때만 API 호출\r\nuseEffect(() => {\r\n    axios.get(url, { params })\r\n      .then(response => {\r\n        console.log(response.data);  // 받아온 데이터 출력\r\n      })\r\n      .catch(error => {\r\n        console.error('Error:', error);  // 에러 발생 시 출력\r\n      });\r\n  }, []);  // 빈 배열은 의존성이 없음을 의미, 즉 처음 렌더링 시 한 번만 실행\r\n\r\n  return (\r\n    <div className=\"aa\">\r\n      {/* 여기에 API 데이터를 보여주기 위한 로직을 추가할 수 있습니다 */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Test2;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEhB,MAAMJ,KAAK,GAAGK,OAAO,CAAC,OAAO,CAAC;EAElC,MAAMC,UAAU,GAAG,8FAA8F,CAAC,CAAE;EACpH,MAAMC,GAAG,GAAG,kDAAkD,CAAC,CAAE;;EAEjE;EACA,MAAMC,MAAM,GAAG;IACbF,UAAU,EAAEA,UAAU;IACtBG,SAAS,EAAE,EAAE;IAAa;IAC1BC,MAAM,EAAE,CAAC;IAAiB;IAC1BC,QAAQ,EAAE,KAAK;IAAW;IAC1BC,SAAS,EAAE,SAAS;IAAO;IAC3BC,KAAK,EAAE,MAAM,CAAa;EAC5B,CAAC;;EAED;EACAC,SAAS,CAAC,MAAM;IACZd,KAAK,CAACe,GAAG,CAACR,GAAG,EAAE;MAAEC;IAAO,CAAC,CAAC,CACvBQ,IAAI,CAACC,QAAQ,IAAI;MAChBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAE;IAC/B,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACdJ,OAAO,CAACI,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC,CAAC,CAAE;IACnC,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC,CAAC,CAAE;;EAET,oBACEpB,OAAA;IAAKqB,SAAS,EAAC;EAAI;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEd,CAAC;AAEV,CAAC;AAACvB,EAAA,CAjCID,KAAK;AAAAyB,EAAA,GAALzB,KAAK;AAmCX,eAAeA,KAAK;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}