{"ast":null,"code":"// src/api.js\nimport axios from'axios';const apiUrl='https://port-0-yeoga-backend-m1hgzlk8a26c4004.sel4.cloudtype.app';const api=axios.create({baseURL:apiUrl});// reissueAccessToken 함수도 이 파일에 넣기\nconst reissueAccessToken=async()=>{try{const response=await axios.post(\"\".concat(apiUrl,\"/reissue\"),{},{withCredentials:true});const newAccessToken=response.data.accessToken;sessionStorage.setItem('accessToken',newAccessToken);return newAccessToken;}catch(error){console.error('엑세스 토큰 재발급 실패:',error);throw error;}};api.interceptors.request.use(async config=>{let token=sessionStorage.getItem('accessToken');if(token){const payload=JSON.parse(atob(token.split('.')[1]));const currentTime=Math.floor(Date.now()/1000);if(currentTime>payload.exp){console.log('토큰이 만료되었습니다. 새로운 토큰을 요청합니다.');try{token=await reissueAccessToken();}catch(error){console.error('새로운 토큰 발급 실패');// 로그아웃 또는 리다이렉트 로직을 여기에 추가할 수 있습니다.\n}}config.headers.Authorization=\"Bearer \".concat(token);}return config;});export default api;","map":{"version":3,"names":["axios","apiUrl","api","create","baseURL","reissueAccessToken","response","post","concat","withCredentials","newAccessToken","data","accessToken","sessionStorage","setItem","error","console","interceptors","request","use","config","token","getItem","payload","JSON","parse","atob","split","currentTime","Math","floor","Date","now","exp","log","headers","Authorization"],"sources":["C:/Users/user/YeoGa_FrontEnd/src/api.js"],"sourcesContent":["// src/api.js\r\nimport axios from 'axios';\r\n\r\nconst apiUrl = 'https://port-0-yeoga-backend-m1hgzlk8a26c4004.sel4.cloudtype.app';\r\n\r\nconst api = axios.create({\r\n  baseURL: apiUrl,\r\n});\r\n\r\n// reissueAccessToken 함수도 이 파일에 넣기\r\nconst reissueAccessToken = async () => {\r\n  try {\r\n    const response = await axios.post(`${apiUrl}/reissue`, {}, {\r\n      withCredentials: true,\r\n    });\r\n    const newAccessToken = response.data.accessToken;\r\n    sessionStorage.setItem('accessToken', newAccessToken);\r\n    return newAccessToken;\r\n  } catch (error) {\r\n    console.error('엑세스 토큰 재발급 실패:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\napi.interceptors.request.use(async (config) => {\r\n  let token = sessionStorage.getItem('accessToken');\r\n  if (token) {\r\n    const payload = JSON.parse(atob(token.split('.')[1]));\r\n    const currentTime = Math.floor(Date.now() / 1000);\r\n\r\n    if (currentTime > payload.exp) {\r\n      console.log('토큰이 만료되었습니다. 새로운 토큰을 요청합니다.');\r\n      try {\r\n        token = await reissueAccessToken(); \r\n      } catch (error) {\r\n        console.error('새로운 토큰 발급 실패');\r\n        // 로그아웃 또는 리다이렉트 로직을 여기에 추가할 수 있습니다.\r\n      }\r\n    }\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport default api;\r\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,KAAM,CAAAC,MAAM,CAAG,kEAAkE,CAEjF,KAAM,CAAAC,GAAG,CAAGF,KAAK,CAACG,MAAM,CAAC,CACvBC,OAAO,CAAEH,MACX,CAAC,CAAC,CAEF;AACA,KAAM,CAAAI,kBAAkB,CAAG,KAAAA,CAAA,GAAY,CACrC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAN,KAAK,CAACO,IAAI,IAAAC,MAAA,CAAIP,MAAM,aAAY,CAAC,CAAC,CAAE,CACzDQ,eAAe,CAAE,IACnB,CAAC,CAAC,CACF,KAAM,CAAAC,cAAc,CAAGJ,QAAQ,CAACK,IAAI,CAACC,WAAW,CAChDC,cAAc,CAACC,OAAO,CAAC,aAAa,CAAEJ,cAAc,CAAC,CACrD,MAAO,CAAAA,cAAc,CACvB,CAAE,MAAOK,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,CAAEA,KAAK,CAAC,CACtC,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAEDb,GAAG,CAACe,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,KAAO,CAAAC,MAAM,EAAK,CAC7C,GAAI,CAAAC,KAAK,CAAGR,cAAc,CAACS,OAAO,CAAC,aAAa,CAAC,CACjD,GAAID,KAAK,CAAE,CACT,KAAM,CAAAE,OAAO,CAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACL,KAAK,CAACM,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACrD,KAAM,CAAAC,WAAW,CAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,IAAI,CAAC,CAEjD,GAAIJ,WAAW,CAAGL,OAAO,CAACU,GAAG,CAAE,CAC7BjB,OAAO,CAACkB,GAAG,CAAC,6BAA6B,CAAC,CAC1C,GAAI,CACFb,KAAK,CAAG,KAAM,CAAAhB,kBAAkB,CAAC,CAAC,CACpC,CAAE,MAAOU,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,cAAc,CAAC,CAC7B;AACF,CACF,CACAK,MAAM,CAACe,OAAO,CAACC,aAAa,WAAA5B,MAAA,CAAaa,KAAK,CAAE,CAClD,CACA,MAAO,CAAAD,MAAM,CACf,CAAC,CAAC,CAEF,cAAe,CAAAlB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}